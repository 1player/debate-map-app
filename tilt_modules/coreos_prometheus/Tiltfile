def ToLPath(path):
	return path.replace("\\", "/").replace("C:/", "/mnt/c/")
def ToWPath(path):
	return path.replace("/", "\\").replace("\\mnt\\c\\", "C:\\")
	
def ListDir(path, recursive = False):
	return [ToLPath(file) for file in listdir(ToWPath(path), recursive)]
def PathExists(path):
	return os.path.exists(ToWPath(path))
def PathJoin(path1, path2):
	return ToLPath(os.path.join(ToWPath(path1), ToWPath(path2)))
def AbsPath(path):
	return ToLPath(os.path.abspath(ToWPath(path)))
def DirName(path):
	return ToLPath(os.path.dirname(ToWPath(path)))
def BaseName(path):
	return ToLPath(os.path.basename(ToWPath(path)))

def name(c):
	return c['metadata']['name']
def setup_monitoring():
	k8s_yaml([ToWPath(a) for a in setupManifests])

	# Wait until the CRDs are ready.
	local_resource(
		'prometheus-crds-ready',
		cmd=' && '.join([('kubectl wait --for=condition=Established crd %s' % name(c)) for c in crds]),
		resource_deps=['prometheus-crds'],
	)

	k8s_yaml([ToWPath(a) for a in mainManifests])

	crdResources = {}
	for yDoc in mainManifests:
		r = read_yaml(ToWPath(yDoc))
		if r['kind'] in crdTypes:
			rname = name(r)
			if rname not in crdResources:
				crdResources[rname] = []
			crdResources[rname].append('%s:%s' % (rname, r['kind']))

	k8s_resource(
		new_name='prometheus-crds',
		objects = [('%s' % name(c)) for c in crds],
		resource_deps=['prometheus-operator'],
	)

	resources = {
		'grafana': {
			'port_forwards': ["3000"],
		},
		'node-exporter': {},
		'kube-state-metrics': {},
		'prometheus': {
			'new_name': 'prometheus',
			'objects': ['prometheus-k8s:service'],
			'crdResources': ['prometheus', 'k8s'],
			'extra_pod_selectors': [{'prometheus': 'k8s'}],
			'port_forwards': ["9090"],
		},
		'alertmanager': {
			'new_name': 'alertmanager',
			'objects': ['alertmanager-main:service'],
			'crdResources': ['main'],
			'extra_pod_selectors': [{'alertmanager': 'main'}],
			'port_forwards': ["9093"],
		}
	}

	for rname, resource in resources.items():
		args = []
		if 'new_name' not in resource:
			args.append(rname)
		for crd in resource.pop('crdResources', []):
			resource['objects'].extend(crdResources.pop(crd, []))
		k8s_resource(*args, resource_deps=['prometheus-crds'], **resource)

	remainingCrdResources = []
	for res in crdResources.values():
		remainingCrdResources.extend(res)

	k8s_resource(
		new_name='uncategorized-prometheus-resources-requiring-crds',
		objects=remainingCrdResources,
		resource_deps=['prometheus-crds'],
	)

def list_prometheus_crd_types():
	return crdTypes
def get_prometheus_dependencies():
	return ['prometheus-crds']
def get_prometheus_resources(yaml, name):
	results = []
	for crd in list_prometheus_crd_types():
		found, _ = filter_yaml(yaml, name="^%s$" % name, kind="^%s$" % crd)
		if found:
			results.append('%s:%s' % (name, crd))
	return results

# To allow resources that require CRDs created by this extension to be selectively
# pruned from other components if deploying of prometheus is disabled by the
# file loading this one, need to always download and unpack the required files
# and perform a limited amount of parsing.

#def CopyDir(fromFolder, toFolder, recursive = True, allowOverwrites = True):
'''def CopyDir(fromFolder, toFolder, recursive = True, ignoreAlreadyExisting = False, toPathsToIgnore = []):
	for file_fromPath in ListDir(fromFolder, recursive):
		file_toPath = PathJoin(toFolder, BaseName(file_fromPath))
		if ignoreAlreadyExisting and os.path.exists(file_toPath):
			pass
		if file_toPath in toPathsToIgnore:
			pass
		#if os.path.getmtime(file_fromPath) == os.path.getmtime(file_toPath):
		#	pass
		local(["bash", "-c", "cp %s %s" % (file_fromPath, file_toPath)])'''
	
baseManifestsPath = "../../Packages/deploy/Monitors/kube-prometheus/base"
#patchedManifestsPath = PathJoin(DirName(__file__), "patches")
patchedManifestsPath = "../../Packages/deploy/Monitors/kube-prometheus/overlay"
finalManifestsPath = AbsPath("./finalManifests_cache")
finalManifestPaths_withPatches = [PathJoin(finalManifestsPath, BaseName(path)) for path in ListDir(patchedManifestsPath, recursive = True)]
firstRun = not os.path.exists(finalManifestsPath)

# copy the base files to finalManifests_cache
#local(["bash", "-c", "cp -Ru %s %s" % (baseManifestsPath, finalManifestsPath)])
#CopyDir(baseManifestsPath, finalManifestsPath, True, True, finalManifestPaths_withPatches)
# -R = recursive, -u = only overwrite if newer, +"/." = copy the contents directly into folder [not into inner folder]
local(["bash", "-c", "cp " + ("-R" if firstRun else "-Ru") + " %s %s" % (baseManifestsPath + "/.", finalManifestsPath)])

# then copy the patches (see readme for list of changed behaviors)
local(["bash", "-c", "cp " + ("-R" if firstRun else "-Ru") + " %s %s" % (patchedManifestsPath + "/.", finalManifestsPath)])
#CopyDir(patchedManifestsPath, finalManifestsPath)

# Namespace and CRDs
setupManifests = [doc for doc in ListDir(PathJoin(baseManifestsPath, 'setup'), recursive=True) if not doc.endswith("/kustomization.yaml")]
# Main resources depending on setup
mainManifests = [doc for doc in ListDir(baseManifestsPath) if not doc.endswith("/kustomization.yaml")]

crds = []
for doc in setupManifests:
	r = read_yaml(ToWPath(doc))
	if 'kind' in r and r['kind'] == 'CustomResourceDefinition':
		crds.append(r)

# crdTypes must be known to allow filtering out of these resources to allow
# enabling/disabling use of prometheus in an environment
crdTypes = [crd['spec']['names']['kind'] for crd in crds]